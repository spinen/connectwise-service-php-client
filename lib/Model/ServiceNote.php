<?php
/**
 * ServiceNote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Service
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service API
 *
 * ConnectWise Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Service\Model;

use \ArrayAccess;

/**
 * ServiceNote Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Service
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServiceNote implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ServiceNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'ticket_id' => 'int',
        'text' => 'string',
        'detail_description_flag' => 'bool',
        'internal_analysis_flag' => 'bool',
        'resolution_flag' => 'bool',
        'member' => '\Spinen\ConnectWise\Clients\Service\Model\MemberReference',
        'contact' => '\Spinen\ConnectWise\Clients\Service\Model\ContactReference',
        'customer_updated_flag' => 'bool',
        'process_notifications' => 'bool',
        'date_created' => 'string',
        'created_by' => 'string',
        'internal_flag' => 'bool',
        'external_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\Service\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ticket_id' => 'ticketId',
        'text' => 'text',
        'detail_description_flag' => 'detailDescriptionFlag',
        'internal_analysis_flag' => 'internalAnalysisFlag',
        'resolution_flag' => 'resolutionFlag',
        'member' => 'member',
        'contact' => 'contact',
        'customer_updated_flag' => 'customerUpdatedFlag',
        'process_notifications' => 'processNotifications',
        'date_created' => 'dateCreated',
        'created_by' => 'createdBy',
        'internal_flag' => 'internalFlag',
        'external_flag' => 'externalFlag',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ticket_id' => 'setTicketId',
        'text' => 'setText',
        'detail_description_flag' => 'setDetailDescriptionFlag',
        'internal_analysis_flag' => 'setInternalAnalysisFlag',
        'resolution_flag' => 'setResolutionFlag',
        'member' => 'setMember',
        'contact' => 'setContact',
        'customer_updated_flag' => 'setCustomerUpdatedFlag',
        'process_notifications' => 'setProcessNotifications',
        'date_created' => 'setDateCreated',
        'created_by' => 'setCreatedBy',
        'internal_flag' => 'setInternalFlag',
        'external_flag' => 'setExternalFlag',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ticket_id' => 'getTicketId',
        'text' => 'getText',
        'detail_description_flag' => 'getDetailDescriptionFlag',
        'internal_analysis_flag' => 'getInternalAnalysisFlag',
        'resolution_flag' => 'getResolutionFlag',
        'member' => 'getMember',
        'contact' => 'getContact',
        'customer_updated_flag' => 'getCustomerUpdatedFlag',
        'process_notifications' => 'getProcessNotifications',
        'date_created' => 'getDateCreated',
        'created_by' => 'getCreatedBy',
        'internal_flag' => 'getInternalFlag',
        'external_flag' => 'getExternalFlag',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['detail_description_flag'] = isset($data['detail_description_flag']) ? $data['detail_description_flag'] : null;
        $this->container['internal_analysis_flag'] = isset($data['internal_analysis_flag']) ? $data['internal_analysis_flag'] : null;
        $this->container['resolution_flag'] = isset($data['resolution_flag']) ? $data['resolution_flag'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['customer_updated_flag'] = isset($data['customer_updated_flag']) ? $data['customer_updated_flag'] : null;
        $this->container['process_notifications'] = isset($data['process_notifications']) ? $data['process_notifications'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['internal_flag'] = isset($data['internal_flag']) ? $data['internal_flag'] : null;
        $this->container['external_flag'] = isset($data['external_flag']) ? $data['external_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ticket_id
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     * @param int $ticket_id
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets detail_description_flag
     * @return bool
     */
    public function getDetailDescriptionFlag()
    {
        return $this->container['detail_description_flag'];
    }

    /**
     * Sets detail_description_flag
     * @param bool $detail_description_flag
     * @return $this
     */
    public function setDetailDescriptionFlag($detail_description_flag)
    {
        $this->container['detail_description_flag'] = $detail_description_flag;

        return $this;
    }

    /**
     * Gets internal_analysis_flag
     * @return bool
     */
    public function getInternalAnalysisFlag()
    {
        return $this->container['internal_analysis_flag'];
    }

    /**
     * Sets internal_analysis_flag
     * @param bool $internal_analysis_flag
     * @return $this
     */
    public function setInternalAnalysisFlag($internal_analysis_flag)
    {
        $this->container['internal_analysis_flag'] = $internal_analysis_flag;

        return $this;
    }

    /**
     * Gets resolution_flag
     * @return bool
     */
    public function getResolutionFlag()
    {
        return $this->container['resolution_flag'];
    }

    /**
     * Sets resolution_flag
     * @param bool $resolution_flag
     * @return $this
     */
    public function setResolutionFlag($resolution_flag)
    {
        $this->container['resolution_flag'] = $resolution_flag;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\Service\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\Service\Model\MemberReference $member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets contact
     * @return \Spinen\ConnectWise\Clients\Service\Model\ContactReference
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \Spinen\ConnectWise\Clients\Service\Model\ContactReference $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets customer_updated_flag
     * @return bool
     */
    public function getCustomerUpdatedFlag()
    {
        return $this->container['customer_updated_flag'];
    }

    /**
     * Sets customer_updated_flag
     * @param bool $customer_updated_flag
     * @return $this
     */
    public function setCustomerUpdatedFlag($customer_updated_flag)
    {
        $this->container['customer_updated_flag'] = $customer_updated_flag;

        return $this;
    }

    /**
     * Gets process_notifications
     * @return bool
     */
    public function getProcessNotifications()
    {
        return $this->container['process_notifications'];
    }

    /**
     * Sets process_notifications
     * @param bool $process_notifications
     * @return $this
     */
    public function setProcessNotifications($process_notifications)
    {
        $this->container['process_notifications'] = $process_notifications;

        return $this;
    }

    /**
     * Gets date_created
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param string $date_created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets created_by
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     * @param string $created_by
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets internal_flag
     * @return bool
     */
    public function getInternalFlag()
    {
        return $this->container['internal_flag'];
    }

    /**
     * Sets internal_flag
     * @param bool $internal_flag
     * @return $this
     */
    public function setInternalFlag($internal_flag)
    {
        $this->container['internal_flag'] = $internal_flag;

        return $this;
    }

    /**
     * Gets external_flag
     * @return bool
     */
    public function getExternalFlag()
    {
        return $this->container['external_flag'];
    }

    /**
     * Sets external_flag
     * @param bool $external_flag
     * @return $this
     */
    public function setExternalFlag($external_flag)
    {
        $this->container['external_flag'] = $external_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Service\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Service\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this));
    }
}


