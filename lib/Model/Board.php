<?php
/**
 * Board
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Service
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service API
 *
 * ConnectWise Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Service\Model;

use \ArrayAccess;

/**
 * Board Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Service
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Board implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Board';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'inactive' => 'bool',
        'sign_off_template' => '\Spinen\ConnectWise\Clients\Service\Model\ServiceSignoffReference',
        'send_to_contact' => 'bool',
        'contact_template_id' => 'int',
        'send_to_resource' => 'bool',
        'resource_template_id' => 'int',
        'project_flag' => 'bool',
        'show_dependencies_flag' => 'bool',
        'show_estimates_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\Service\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'inactive' => 'inactive',
        'sign_off_template' => 'signOffTemplate',
        'send_to_contact' => 'sendToContact',
        'contact_template_id' => 'contactTemplateId',
        'send_to_resource' => 'sendToResource',
        'resource_template_id' => 'resourceTemplateId',
        'project_flag' => 'projectFlag',
        'show_dependencies_flag' => 'showDependenciesFlag',
        'show_estimates_flag' => 'showEstimatesFlag',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'inactive' => 'setInactive',
        'sign_off_template' => 'setSignOffTemplate',
        'send_to_contact' => 'setSendToContact',
        'contact_template_id' => 'setContactTemplateId',
        'send_to_resource' => 'setSendToResource',
        'resource_template_id' => 'setResourceTemplateId',
        'project_flag' => 'setProjectFlag',
        'show_dependencies_flag' => 'setShowDependenciesFlag',
        'show_estimates_flag' => 'setShowEstimatesFlag',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'inactive' => 'getInactive',
        'sign_off_template' => 'getSignOffTemplate',
        'send_to_contact' => 'getSendToContact',
        'contact_template_id' => 'getContactTemplateId',
        'send_to_resource' => 'getSendToResource',
        'resource_template_id' => 'getResourceTemplateId',
        'project_flag' => 'getProjectFlag',
        'show_dependencies_flag' => 'getShowDependenciesFlag',
        'show_estimates_flag' => 'getShowEstimatesFlag',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['inactive'] = isset($data['inactive']) ? $data['inactive'] : null;
        $this->container['sign_off_template'] = isset($data['sign_off_template']) ? $data['sign_off_template'] : null;
        $this->container['send_to_contact'] = isset($data['send_to_contact']) ? $data['send_to_contact'] : null;
        $this->container['contact_template_id'] = isset($data['contact_template_id']) ? $data['contact_template_id'] : null;
        $this->container['send_to_resource'] = isset($data['send_to_resource']) ? $data['send_to_resource'] : null;
        $this->container['resource_template_id'] = isset($data['resource_template_id']) ? $data['resource_template_id'] : null;
        $this->container['project_flag'] = isset($data['project_flag']) ? $data['project_flag'] : null;
        $this->container['show_dependencies_flag'] = isset($data['show_dependencies_flag']) ? $data['show_dependencies_flag'] : null;
        $this->container['show_estimates_flag'] = isset($data['show_estimates_flag']) ? $data['show_estimates_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['location_id'] === null) {
            $invalid_properties[] = "'location_id' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalid_properties[] = "'business_unit_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        if ($this->container['location_id'] === null) {
            return false;
        }
        if ($this->container['business_unit_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Board., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets inactive
     * @return bool
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     * @param bool $inactive
     * @return $this
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets sign_off_template
     * @return \Spinen\ConnectWise\Clients\Service\Model\ServiceSignoffReference
     */
    public function getSignOffTemplate()
    {
        return $this->container['sign_off_template'];
    }

    /**
     * Sets sign_off_template
     * @param \Spinen\ConnectWise\Clients\Service\Model\ServiceSignoffReference $sign_off_template
     * @return $this
     */
    public function setSignOffTemplate($sign_off_template)
    {
        $this->container['sign_off_template'] = $sign_off_template;

        return $this;
    }

    /**
     * Gets send_to_contact
     * @return bool
     */
    public function getSendToContact()
    {
        return $this->container['send_to_contact'];
    }

    /**
     * Sets send_to_contact
     * @param bool $send_to_contact
     * @return $this
     */
    public function setSendToContact($send_to_contact)
    {
        $this->container['send_to_contact'] = $send_to_contact;

        return $this;
    }

    /**
     * Gets contact_template_id
     * @return int
     */
    public function getContactTemplateId()
    {
        return $this->container['contact_template_id'];
    }

    /**
     * Sets contact_template_id
     * @param int $contact_template_id
     * @return $this
     */
    public function setContactTemplateId($contact_template_id)
    {
        $this->container['contact_template_id'] = $contact_template_id;

        return $this;
    }

    /**
     * Gets send_to_resource
     * @return bool
     */
    public function getSendToResource()
    {
        return $this->container['send_to_resource'];
    }

    /**
     * Sets send_to_resource
     * @param bool $send_to_resource
     * @return $this
     */
    public function setSendToResource($send_to_resource)
    {
        $this->container['send_to_resource'] = $send_to_resource;

        return $this;
    }

    /**
     * Gets resource_template_id
     * @return int
     */
    public function getResourceTemplateId()
    {
        return $this->container['resource_template_id'];
    }

    /**
     * Sets resource_template_id
     * @param int $resource_template_id
     * @return $this
     */
    public function setResourceTemplateId($resource_template_id)
    {
        $this->container['resource_template_id'] = $resource_template_id;

        return $this;
    }

    /**
     * Gets project_flag
     * @return bool
     */
    public function getProjectFlag()
    {
        return $this->container['project_flag'];
    }

    /**
     * Sets project_flag
     * @param bool $project_flag
     * @return $this
     */
    public function setProjectFlag($project_flag)
    {
        $this->container['project_flag'] = $project_flag;

        return $this;
    }

    /**
     * Gets show_dependencies_flag
     * @return bool
     */
    public function getShowDependenciesFlag()
    {
        return $this->container['show_dependencies_flag'];
    }

    /**
     * Sets show_dependencies_flag
     * @param bool $show_dependencies_flag This field only shows if it is Project Board.
     * @return $this
     */
    public function setShowDependenciesFlag($show_dependencies_flag)
    {
        $this->container['show_dependencies_flag'] = $show_dependencies_flag;

        return $this;
    }

    /**
     * Gets show_estimates_flag
     * @return bool
     */
    public function getShowEstimatesFlag()
    {
        return $this->container['show_estimates_flag'];
    }

    /**
     * Sets show_estimates_flag
     * @param bool $show_estimates_flag This field only shows if it is Project Board.
     * @return $this
     */
    public function setShowEstimatesFlag($show_estimates_flag)
    {
        $this->container['show_estimates_flag'] = $show_estimates_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Service\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Service\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this));
    }
}


