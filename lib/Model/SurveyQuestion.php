<?php
/**
 * SurveyQuestion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Service
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service API
 *
 * ConnectWise Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model;

use \ArrayAccess;

/**
 * SurveyQuestion Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Service
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SurveyQuestion implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SurveyQuestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'sequence_number' => 'int',
        'type' => 'string',
        'question' => 'string',
        'options' => '\Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model\SurveyQuestionOption[]',
        'include_flag' => 'bool',
        'required_flag' => 'bool',
        'no_answer_points' => 'int',
        'survey_id' => 'int',
        '_info' => '\Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sequence_number' => 'sequenceNumber',
        'type' => 'type',
        'question' => 'question',
        'options' => 'options',
        'include_flag' => 'includeFlag',
        'required_flag' => 'requiredFlag',
        'no_answer_points' => 'noAnswerPoints',
        'survey_id' => 'surveyId',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sequence_number' => 'setSequenceNumber',
        'type' => 'setType',
        'question' => 'setQuestion',
        'options' => 'setOptions',
        'include_flag' => 'setIncludeFlag',
        'required_flag' => 'setRequiredFlag',
        'no_answer_points' => 'setNoAnswerPoints',
        'survey_id' => 'setSurveyId',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sequence_number' => 'getSequenceNumber',
        'type' => 'getType',
        'question' => 'getQuestion',
        'options' => 'getOptions',
        'include_flag' => 'getIncludeFlag',
        'required_flag' => 'getRequiredFlag',
        'no_answer_points' => 'getNoAnswerPoints',
        'survey_id' => 'getSurveyId',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_OPEN_ENDED = 'OpenEnded';
    const TYPE_SELECTION = 'Selection';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_OPEN_ENDED,
            self::TYPE_SELECTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['include_flag'] = isset($data['include_flag']) ? $data['include_flag'] : null;
        $this->container['required_flag'] = isset($data['required_flag']) ? $data['required_flag'] : null;
        $this->container['no_answer_points'] = isset($data['no_answer_points']) ? $data['no_answer_points'] : null;
        $this->container['survey_id'] = isset($data['survey_id']) ? $data['survey_id'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["OpenEnded", "Selection"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if ($this->container['question'] === null) {
            $invalid_properties[] = "'question' can't be null";
        }
        if ((strlen($this->container['question']) > 1000)) {
            $invalid_properties[] = "invalid value for 'question', the character length must be smaller than or equal to 1000.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["OpenEnded", "Selection"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['question'] === null) {
            return false;
        }
        if (strlen($this->container['question']) > 1000) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sequence_number
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     * @param int $sequence_number
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('OpenEnded', 'Selection');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'OpenEnded', 'Selection'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets question
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     * @param string $question
     * @return $this
     */
    public function setQuestion($question)
    {
        if ((strlen($question) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $question when calling SurveyQuestion., must be smaller than or equal to 1000.');
        }

        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets options
     * @return \Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model\SurveyQuestionOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model\SurveyQuestionOption[] $options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets include_flag
     * @return bool
     */
    public function getIncludeFlag()
    {
        return $this->container['include_flag'];
    }

    /**
     * Sets include_flag
     * @param bool $include_flag
     * @return $this
     */
    public function setIncludeFlag($include_flag)
    {
        $this->container['include_flag'] = $include_flag;

        return $this;
    }

    /**
     * Gets required_flag
     * @return bool
     */
    public function getRequiredFlag()
    {
        return $this->container['required_flag'];
    }

    /**
     * Sets required_flag
     * @param bool $required_flag
     * @return $this
     */
    public function setRequiredFlag($required_flag)
    {
        $this->container['required_flag'] = $required_flag;

        return $this;
    }

    /**
     * Gets no_answer_points
     * @return int
     */
    public function getNoAnswerPoints()
    {
        return $this->container['no_answer_points'];
    }

    /**
     * Sets no_answer_points
     * @param int $no_answer_points
     * @return $this
     */
    public function setNoAnswerPoints($no_answer_points)
    {
        $this->container['no_answer_points'] = $no_answer_points;

        return $this;
    }

    /**
     * Gets survey_id
     * @return int
     */
    public function getSurveyId()
    {
        return $this->container['survey_id'];
    }

    /**
     * Sets survey_id
     * @param int $survey_id
     * @return $this
     */
    public function setSurveyId($survey_id)
    {
        $this->container['survey_id'] = $survey_id;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Service\Spinen\ConnectWise\Clients\Service\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this));
    }
}


