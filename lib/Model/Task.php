<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Service
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service API
 *
 * ConnectWise Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Service\Model;

use \ArrayAccess;

/**
 * Task Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Service
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Task implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'ticket_id' => 'int',
        'notes' => 'string',
        'closed_flag' => 'bool',
        'priority' => 'int',
        'schedule' => '\Spinen\ConnectWise\Clients\Service\Model\ScheduleEntryReference',
        'code' => '\Spinen\ConnectWise\Clients\Service\Model\ServiceCodeReference',
        'resolution' => 'string',
        'child_schedule_action' => 'string',
        'child_ticket_id' => 'int',
        '_info' => '\Spinen\ConnectWise\Clients\Service\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ticket_id' => 'ticketId',
        'notes' => 'notes',
        'closed_flag' => 'closedFlag',
        'priority' => 'priority',
        'schedule' => 'schedule',
        'code' => 'code',
        'resolution' => 'resolution',
        'child_schedule_action' => 'childScheduleAction',
        'child_ticket_id' => 'childTicketId',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ticket_id' => 'setTicketId',
        'notes' => 'setNotes',
        'closed_flag' => 'setClosedFlag',
        'priority' => 'setPriority',
        'schedule' => 'setSchedule',
        'code' => 'setCode',
        'resolution' => 'setResolution',
        'child_schedule_action' => 'setChildScheduleAction',
        'child_ticket_id' => 'setChildTicketId',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ticket_id' => 'getTicketId',
        'notes' => 'getNotes',
        'closed_flag' => 'getClosedFlag',
        'priority' => 'getPriority',
        'schedule' => 'getSchedule',
        'code' => 'getCode',
        'resolution' => 'getResolution',
        'child_schedule_action' => 'getChildScheduleAction',
        'child_ticket_id' => 'getChildTicketId',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CHILD_SCHEDULE_ACTION_TRANSFER = 'Transfer';
    const CHILD_SCHEDULE_ACTION_DELETE = 'Delete';
    const CHILD_SCHEDULE_ACTION_DONE = 'Done';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChildScheduleActionAllowableValues()
    {
        return [
            self::CHILD_SCHEDULE_ACTION_TRANSFER,
            self::CHILD_SCHEDULE_ACTION_DELETE,
            self::CHILD_SCHEDULE_ACTION_DONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['closed_flag'] = isset($data['closed_flag']) ? $data['closed_flag'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['child_schedule_action'] = isset($data['child_schedule_action']) ? $data['child_schedule_action'] : null;
        $this->container['child_ticket_id'] = isset($data['child_ticket_id']) ? $data['child_ticket_id'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['priority']) && ($this->container['priority'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'priority', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < 1)) {
            $invalid_properties[] = "invalid value for 'priority', must be bigger than or equal to 1.";
        }

        $allowed_values = ["Transfer", "Delete", "Done"];
        if (!in_array($this->container['child_schedule_action'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'child_schedule_action', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['priority'] > 2147483647) {
            return false;
        }
        if ($this->container['priority'] < 1) {
            return false;
        }
        $allowed_values = ["Transfer", "Delete", "Done"];
        if (!in_array($this->container['child_schedule_action'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ticket_id
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     * @param int $ticket_id
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets closed_flag
     * @return bool
     */
    public function getClosedFlag()
    {
        return $this->container['closed_flag'];
    }

    /**
     * Sets closed_flag
     * @param bool $closed_flag
     * @return $this
     */
    public function setClosedFlag($closed_flag)
    {
        $this->container['closed_flag'] = $closed_flag;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority
     * @return $this
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling Task., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($priority) && ($priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling Task., must be bigger than or equal to 1.');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets schedule
     * @return \Spinen\ConnectWise\Clients\Service\Model\ScheduleEntryReference
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     * @param \Spinen\ConnectWise\Clients\Service\Model\ScheduleEntryReference $schedule
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets code
     * @return \Spinen\ConnectWise\Clients\Service\Model\ServiceCodeReference
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param \Spinen\ConnectWise\Clients\Service\Model\ServiceCodeReference $code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets resolution
     * @return string
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     * @param string $resolution
     * @return $this
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets child_schedule_action
     * @return string
     */
    public function getChildScheduleAction()
    {
        return $this->container['child_schedule_action'];
    }

    /**
     * Sets child_schedule_action
     * @param string $child_schedule_action
     * @return $this
     */
    public function setChildScheduleAction($child_schedule_action)
    {
        $allowed_values = array('Transfer', 'Delete', 'Done');
        if (!is_null($child_schedule_action) && (!in_array($child_schedule_action, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'child_schedule_action', must be one of 'Transfer', 'Delete', 'Done'");
        }
        $this->container['child_schedule_action'] = $child_schedule_action;

        return $this;
    }

    /**
     * Gets child_ticket_id
     * @return int
     */
    public function getChildTicketId()
    {
        return $this->container['child_ticket_id'];
    }

    /**
     * Sets child_ticket_id
     * @param int $child_ticket_id
     * @return $this
     */
    public function setChildTicketId($child_ticket_id)
    {
        $this->container['child_ticket_id'] = $child_ticket_id;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Service\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Service\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Service\ObjectSerializer::sanitizeForSerialization($this));
    }
}


